require('dotenv').config();
const express = require('express');
const axios = require('axios');
const db = require('./src/config/database');

const app = express();
app.use(express.json());

// ะคัะฝะบัะธั ะพัะฟัะฐะฒะบะธ ัะฒะตะดะพะผะปะตะฝะธั ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต ะฒ Telegram
async function sendNewOrderNotification(tgId, orderId, dateMeeting) {
  try {
    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      console.error('โ BOT_TOKEN ะฝะต ัััะฐะฝะพะฒะปะตะฝ');
      return;
    }

    // ะคะพัะผะฐัะธััะตะผ ะดะฐัั (ะฟะพะบะฐะทัะฒะฐะตะผ ะฒัะตะผั ะบะฐะบ ะตััั, ะฑะตะท ะบะพะฝะฒะตััะฐัะธะธ ัะฐัะพะฒะพะณะพ ะฟะพััะฐ)
    const date = new Date(dateMeeting);
    const dateStr = date.toLocaleDateString('ru-RU');
    const timeStr = date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit',
      timeZone: 'UTC'  // ะะพะบะฐะทัะฒะฐะตะผ UTC ะฒัะตะผั
    });

    const message = `๐ ะะพะฒัะน ะทะฐะบะฐะท โ${orderId} ${dateStr} ${timeStr}`;

    console.log(`๐ค ะัะฟัะฐะฒะปัะตะผ ัะฒะตะดะพะผะปะตะฝะธะต ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต ะฒ Telegram: ${message}`);
    console.log(`๐ chat_id: ${tgId} (ัะธะฟ: ${typeof tgId})`);
    console.log(`๐ botToken: ${botToken}`);
    
    // ะัะตะพะฑัะฐะทัะตะผ ะฒ ัะธัะปะพ
    const chatId = parseInt(tgId);
    console.log(`๐ chatId ะฟะพัะปะต parseInt: ${chatId} (ัะธะฟ: ${typeof chatId})`);

    const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });

    console.log(`โ ะฃะฒะตะดะพะผะปะตะฝะธะต ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต ะพัะฟัะฐะฒะปะตะฝะพ ะฒ Telegram:`, response.data);
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ัะฒะตะดะพะผะปะตะฝะธั ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต ะฒ Telegram:', error.response?.data || error.message);
  }
}

// ะคัะฝะบัะธั ะพัะฟัะฐะฒะบะธ ัะฒะตะดะพะผะปะตะฝะธั ะฒ Telegram
async function sendTelegramNotification(tgId, orderId, newDate) {
  try {
    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      console.error('โ BOT_TOKEN ะฝะต ัััะฐะฝะพะฒะปะตะฝ');
      return;
    }

    // ะคะพัะผะฐัะธััะตะผ ะดะฐัั (ะฟะพะบะฐะทัะฒะฐะตะผ ะฒัะตะผั ะบะฐะบ ะตััั, ะฑะตะท ะบะพะฝะฒะตััะฐัะธะธ ัะฐัะพะฒะพะณะพ ะฟะพััะฐ)
    const date = new Date(newDate);
    const dateStr = date.toLocaleDateString('ru-RU');
    const timeStr = date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit',
      timeZone: 'UTC'  // ะะพะบะฐะทัะฒะฐะตะผ UTC ะฒัะตะผั
    });

    const message = `๐ ะะฐะบะฐะท โ${orderId} ะฟะตัะตะฝะตัะตะฝ ะฝะฐ ${dateStr} ${timeStr}`;

    console.log(`๐ค ะัะฟัะฐะฒะปัะตะผ ัะพะพะฑัะตะฝะธะต ะฒ Telegram: ${message}`);
    console.log(`๐ chat_id: ${tgId} (ัะธะฟ: ${typeof tgId})`);
    console.log(`๐ botToken: ${botToken}`);
    
    // ะัะตะพะฑัะฐะทัะตะผ ะฒ ัะธัะปะพ
    const chatId = parseInt(tgId);
    console.log(`๐ chatId ะฟะพัะปะต parseInt: ${chatId} (ัะธะฟ: ${typeof chatId})`);

       const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
         chat_id: chatId,
         text: message,
         parse_mode: 'HTML'
       });

    console.log(`โ ะกะพะพะฑัะตะฝะธะต ะพัะฟัะฐะฒะปะตะฝะพ ะฒ Telegram:`, response.data);
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ะฒ Telegram:', error.response?.data || error.message);
  }
}

// Webhook endpoint
app.post('/webhook/order-update', async (req, res) => {
  try {
    console.log('๐จ ะะพะปััะตะฝ webhook ะทะฐะฟัะพั:', req.body);
    
    const { orderId, newDate, city, token } = req.body;

    // ะัะพะฒะตัะบะฐ ัะพะบะตะฝะฐ
    if (token !== process.env.WEBHOOK_TOKEN) {
      console.log('โ ะะตะฒะตัะฝัะน ัะพะบะตะฝ webhook');
      return res.status(401).json({ success: false, message: 'Unauthorized' });
    }

    console.log(`๐จ ะะพะปััะตะฝะพ ัะฒะตะดะพะผะปะตะฝะธะต: ะทะฐะบะฐะท #${orderId}, ะฝะพะฒะฐั ะดะฐัะฐ: ${newDate}, ะณะพัะพะด: ${city}`);

    // ะะพะดะบะปััะฐะตะผัั ะบ ะะ
    await db.connect();
    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ ะะ ัััะฐะฝะพะฒะปะตะฝะพ');

    // ะะพะปััะฐะตะผ ะบะปะธะตะฝั ะะ
    const client = db.getClient();
    if (!client) {
      console.error('โ ะะปะธะตะฝั ะะ ะฝะต ัะพะทะดะฐะฝ');
      return res.status(500).json({ success: false, message: 'Database client not available' });
    }

    // ะะพะปััะฐะตะผ ะดะธัะตะบัะพัะฐ ะฟะพ ะณะพัะพะดั
    const query = `
      SELECT tg_id, name, cities 
      FROM director 
      WHERE $1 = ANY(cities)
      LIMIT 1
    `;
    console.log(`๐ ะัะตะผ ะดะธัะตะบัะพัะฐ ะดะปั ะณะพัะพะดะฐ: ${city}`);
    
    const result = await client.query(query, [city]);
    const director = result.rows[0];

    if (!director) {
      console.log(`โ ะะธัะตะบัะพั ะดะปั ะณะพัะพะดะฐ ${city} ะฝะต ะฝะฐะนะดะตะฝ`);
      return res.status(404).json({ success: false, message: 'Director not found' });
    }

    console.log(`โ ะะฐะนะดะตะฝ ะดะธัะตะบัะพั: ${director.name} (tg_id: ${director.tg_id})`);
    
    // ะัะฟัะฐะฒะปัะตะผ ัะฒะตะดะพะผะปะตะฝะธะต ะฒ Telegram
    await sendTelegramNotification(director.tg_id, orderId, newDate);
    
    console.log(`๐ค ะฃะฒะตะดะพะผะปะตะฝะธะต ะพัะฟัะฐะฒะปะตะฝะพ ะดะธัะตะบัะพัั ${director.tg_id}`);

    res.json({ success: true, message: 'Notification processed' });
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฒ webhook:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// Webhook ะดะปั ะฝะพะฒะพะน ะทะฐัะฒะบะธ
app.post('/webhook/new-order', async (req, res) => {
  try {
    console.log('๐จ ะะพะปััะตะฝ webhook ะทะฐะฟัะพั ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต:', req.body);

    const { orderId, city, dateMeeting, token } = req.body;

    // ะัะพะฒะตัะบะฐ ัะพะบะตะฝะฐ ะฑะตะทะพะฟะฐัะฝะพััะธ
    if (token !== process.env.WEBHOOK_TOKEN) {
      console.log('โ ะะตะฒะตัะฝัะน ัะพะบะตะฝ webhook');
      return res.status(401).json({ success: false, message: 'Unauthorized' });
    }

    // ะะฐะปะธะดะฐัะธั ะดะฐะฝะฝัั
    if (!orderId || !city || !dateMeeting) {
      console.log('โ ะััััััะฒััั ะพะฑัะทะฐัะตะปัะฝัะต ะฟะพะปั');
      return res.status(400).json({ success: false, message: 'Missing required fields' });
    }

    console.log(`๐จ ะะพะปััะตะฝะพ ัะฒะตะดะพะผะปะตะฝะธะต ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต: ะทะฐะบะฐะท #${orderId}, ะณะพัะพะด: ${city}`);

    // ะะพะดะบะปััะฐะตะผัั ะบ ะะ
    await db.connect();
    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ ะะ ัััะฐะฝะพะฒะปะตะฝะพ');

    // ะะพะปััะฐะตะผ ะบะปะธะตะฝั ะะ
    const client = db.getClient();
    if (!client) {
      console.error('โ ะะปะธะตะฝั ะะ ะฝะต ัะพะทะดะฐะฝ');
      return res.status(500).json({ success: false, message: 'Database client not available' });
    }

    // ะะพะปััะฐะตะผ ะดะธัะตะบัะพัะฐ ะฟะพ ะณะพัะพะดั
    const query = `
      SELECT tg_id, name, cities
      FROM director
      WHERE $1 = ANY(cities)
      LIMIT 1
    `;
    console.log(`๐ ะัะตะผ ะดะธัะตะบัะพัะฐ ะดะปั ะณะพัะพะดะฐ: ${city}`);

    const result = await client.query(query, [city]);
    const director = result.rows[0];

    if (!director) {
      console.log(`โ ะะธัะตะบัะพั ะดะปั ะณะพัะพะดะฐ ${city} ะฝะต ะฝะฐะนะดะตะฝ`);
      return res.status(404).json({ success: false, message: 'Director not found' });
    }

    console.log(`โ ะะฐะนะดะตะฝ ะดะธัะตะบัะพั: ${director.name} (tg_id: ${director.tg_id})`);

    // ะัะฟัะฐะฒะปัะตะผ ัะฒะตะดะพะผะปะตะฝะธะต ะฒ Telegram
    await sendNewOrderNotification(director.tg_id, orderId, dateMeeting);

    console.log(`๐ค ะฃะฒะตะดะพะผะปะตะฝะธะต ะพ ะฝะพะฒะพะน ะทะฐัะฒะบะต ะพัะฟัะฐะฒะปะตะฝะพ ะดะธัะตะบัะพัั ${director.tg_id}`);

    res.json({ success: true, message: 'New order notification processed' });
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฒ webhook ะฝะพะฒะพะน ะทะฐัะฒะบะธ:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
const port = process.env.WEBHOOK_PORT || 8080;
app.listen(port, () => {
  console.log(`๐ Webhook ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${port}`);
});
