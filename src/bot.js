require('dotenv').config();
const { Telegraf, session } = require('telegraf');
const config = require('../config');
const database = require('./config/database');

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const navigationHandler = require('./handlers/navigation');
const ordersHandler = require('./handlers/orders');
const cashHandler = require('./handlers/cash');
const reportsHandler = require('./handlers/reports');
const employeesHandler = require('./handlers/employees');
const masterHandler = require('./handlers/master');
const textHandler = require('./handlers/text');
const ErrorHandler = require('./utils/errorHandler');
const WebhookHandler = require('./handlers/webhook');
const AuthMiddleware = require('./middleware/auth');

class Bot {
  constructor() {
    console.log('üîç Bot token:', config.BOT_TOKEN);
    this.bot = new Telegraf(config.BOT_TOKEN);
    
    try {
      this.webhookHandler = new WebhookHandler(this.bot);
      console.log('‚úÖ Webhook handler —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook handler:', error);
    }
    
    this.setupSession();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
  setupSession() {
    this.bot.use(session());
    
    // Middleware –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
    this.bot.use((ctx, next) => {
      if (!ctx.session) {
        ctx.session = {};
      }
      return next();
    });

    // Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.bot.use(AuthMiddleware.checkAuth);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupHandlers() {
    navigationHandler.setupHandlers(this.bot);
    ordersHandler.setupHandlers(this.bot);
    cashHandler.setupHandlers(this.bot);
    reportsHandler.setupHandlers(this.bot);
    employeesHandler.setupHandlers(this.bot);
    masterHandler.setupHandlers(this.bot);
    textHandler.setupHandlers(this.bot);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      ErrorHandler.handleBotError(err, ctx);
    });
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start() {
    try {
      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await database.connect();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      
      console.log('‚è≥ –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞...');
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
      // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
      await this.bot.launch();
      console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
      console.log('‚ÑπÔ∏è Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ');
      
      console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
      
      // Graceful shutdown
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop(signal) {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...`);
    
    try {
      await this.bot.stop(signal);
      await database.disconnect();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new Bot();
bot.start().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

module.exports = Bot;
