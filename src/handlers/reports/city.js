const db = require('../../config/database');

class CityReportHandler {
  // –û—Ç—á–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –¥–µ–Ω—å
  async getReportForDay(ctx) {
    try {
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

      await this.generateReport(ctx, startOfDay, endOfDay, '–ó–∞ –¥–µ–Ω—å');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –¥–µ–Ω—å:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –û—Ç—á–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –Ω–µ–¥–µ–ª—é
  async getReportForWeek(ctx) {
    try {
      const today = new Date();
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay() + 1);
      startOfWeek.setHours(0, 0, 0, 0);
      
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 7);

      await this.generateReport(ctx, startOfWeek, endOfWeek, '–ó–∞ –Ω–µ–¥–µ–ª—é');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –Ω–µ–¥–µ–ª—é:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –û—Ç—á–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –º–µ—Å—è—Ü
  async getReportForMonth(ctx) {
    try {
      const today = new Date();
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);

      await this.generateReport(ctx, startOfMonth, endOfMonth, '–ó–∞ –º–µ—Å—è—Ü');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –º–µ—Å—è—Ü:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É
  async generateReport(ctx, startDate, endDate, period) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      if (!directorInfo || !directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const directorCities = directorInfo.cities;
      console.log(`üîç –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:`, directorCities);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const query = `
        SELECT 
          city,
          -- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –ø–æ date_meeting
          COUNT(CASE WHEN date_meeting >= $1 AND date_meeting < $2 THEN 1 END) as total_orders,
          COUNT(CASE WHEN date_meeting >= $1 AND date_meeting < $2 AND status_order = '–ú–æ–¥–µ—Ä–Ω' THEN 1 END) as modern_orders,
          -- –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –æ—Ç–∫–∞–∑–Ω—ã–µ, –Ω–µ–∑–∞–∫–∞–∑—ã –ø–æ closing_data
          COUNT(CASE WHEN closing_data >= $1 AND closing_data < $2 AND status_order = '–ì–æ—Ç–æ–≤–æ' THEN 1 END) as completed_orders,
          COUNT(CASE WHEN closing_data >= $1 AND closing_data < $2 AND status_order IN ('–û—Ç–∫–∞–∑', '–ù–µ–∑–∞–∫–∞–∑') THEN 1 END) as rejected_orders,
          -- –û–±–æ—Ä–æ—Ç –ø–æ closing_data
          COALESCE(SUM(CASE WHEN closing_data >= $1 AND closing_data < $2 AND status_order = '–ì–æ—Ç–æ–≤–æ' THEN clean ELSE 0 END), 0) as total_clean
        FROM orders 
        WHERE city = ANY($3)
        GROUP BY city
        ORDER BY city ASC
      `;
      
      console.log(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, {
        startDate: startDate,
        endDate: endDate,
        directorCities: directorCities
      });

      const result = await db.getClient().query(query, [startDate, endDate, directorCities]);
      const cityStats = result.rows;

      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:`, cityStats);

      if (cityStats.length === 0) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        const checkQuery = `
          SELECT 
            COUNT(CASE WHEN date_meeting >= $1 AND date_meeting < $2 THEN 1 END) as total_by_meeting,
            COUNT(CASE WHEN closing_data >= $1 AND closing_data < $2 THEN 1 END) as total_by_closing,
            array_agg(DISTINCT city) as cities_in_db
          FROM orders 
        `;
        const checkResult = await db.getClient().query(checkQuery, [startDate, endDate]);
        const checkData = checkResult.rows[0];
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î:`, checkData);
        
        ctx.reply(`üèôÔ∏è *–û—Ç—á–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É - ${period}*\n\n–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞:\n- –ó–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏: ${checkData.total_by_meeting}\n- –ó–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${checkData.total_by_closing}\n- –ì–æ—Ä–æ–¥–∞ –≤ –ë–î: ${checkData.cities_in_db.join(', ')}\n- –í–∞—à–∏ –≥–æ—Ä–æ–¥–∞: ${directorCities.join(', ')}`, {
          parse_mode: 'Markdown'
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
      let message = `üèôÔ∏è *–û—Ç—á–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É - ${period}*\n\n`;
      message += `${startDate.toLocaleDateString('ru-RU')}\n\n`;

      cityStats.forEach(city => {
        const totalOrders = parseInt(city.total_orders);
        const completedOrders = parseInt(city.completed_orders);
        const rejectedOrders = parseInt(city.rejected_orders);
        const modernOrders = parseInt(city.modern_orders);
        const totalClean = parseFloat(city.total_clean);
        
        // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = —Å—É–º–º–∞ —á–∏—Å—Ç—ã–º–∏ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ì–æ—Ç–æ–≤–æ/–û—Ç–∫–∞–∑
        const ordersForAverage = completedOrders + rejectedOrders;
        const averageCheck = ordersForAverage > 0 ? (totalClean / ordersForAverage).toFixed(2) : '0.00';

        message += `*${city.city}:*\n\n`;
        message += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\n`;
        message += `–í—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${completedOrders}\n`;
        message += `–û—Ç–∫–∞–∑–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${rejectedOrders}\n`;
        message += `–ó–∞–∫–∞–∑—ã –≤ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏: ${modernOrders}\n\n`;
        message += `–û–±–æ—Ä–æ—Ç: ${totalClean} ‚ÇΩ\n`;
        message += `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${averageCheck} ‚ÇΩ\n\n`;
        message += `----------------------------------------\n\n`;
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
  async sendReportFile(ctx, content, fileName, caption) {
    try {
      const fs = require('fs');
      const path = require('path');
      const filePath = path.join(__dirname, '..', '..', '..', 'temp', fileName);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const tempDir = path.dirname(filePath);
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
      fs.writeFileSync(filePath, content, 'utf8');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      await ctx.replyWithDocument({
        source: filePath,
        filename: fileName
      }, {
        caption: `üìä *${caption}*\n\nüìÅ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`,
        parse_mode: 'Markdown'
      });
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(filePath);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã
  async requestCustomDate(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.cityReportCustomDate = true;
    
    ctx.reply('üìÖ *–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):', {
      parse_mode: 'Markdown'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã
  async processCustomDate(ctx, dateText) {
    try {
      const dateParts = dateText.split('.');
      if (dateParts.length !== 3) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)');
        return;
      }

      const day = parseInt(dateParts[0]);
      const month = parseInt(dateParts[1]) - 1;
      const year = parseInt(dateParts[2]);

      if (isNaN(day) || isNaN(month) || isNaN(year)) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)');
        return;
      }

      const selectedDate = new Date(year, month, day);
      const startOfDay = new Date(selectedDate);
      startOfDay.setHours(0, 0, 0, 0);
      
      const endOfDay = new Date(selectedDate);
      endOfDay.setHours(23, 59, 59, 999);

      await this.generateReport(ctx, startOfDay, endOfDay, `–ó–∞ ${dateText}`);

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.cityReportCustomDate;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã');
    }
  }

  setupHandlers(bot) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥—É
    bot.action('city_report_day', (ctx) => this.getReportForDay(ctx));
    bot.action('city_report_week', (ctx) => this.getReportForWeek(ctx));
    bot.action('city_report_month', (ctx) => this.getReportForMonth(ctx));
    bot.action('city_report_custom', (ctx) => this.requestCustomDate(ctx));
  }
}

module.exports = new CityReportHandler();
