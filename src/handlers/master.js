const { masterMenu, masterOrdersMenu, masterReportsMenu } = require('../keyboards/menus');
const AuthMiddleware = require('../middleware/auth');
const db = require('../config/database');
const { parseCities, hasCities } = require('../utils/cities');

class MasterHandler {
  setupHandlers(bot) {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞
    bot.hears('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', AuthMiddleware.requireMaster, (ctx) => {
      ctx.reply('–ó–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:', masterOrdersMenu);
    });


    bot.hears('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', AuthMiddleware.requireMaster, (ctx) => {
      ctx.reply('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:', masterReportsMenu);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    bot.hears('üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', AuthMiddleware.requireMaster, async (ctx) => {
      console.log('üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏" —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞');
      await this.getMasterNewOrders(ctx);
    });

    bot.hears('üîß –í —Ä–∞–±–æ—Ç–µ', AuthMiddleware.requireMaster, async (ctx) => {
      console.log('üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üîß –í —Ä–∞–±–æ—Ç–µ" —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞');
      await this.getMasterInWorkOrders(ctx);
    });

    bot.hears('üîÑ –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏', AuthMiddleware.requireMaster, async (ctx) => {
      console.log('üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üîÑ –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏" —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞');
      await this.getMasterModernOrders(ctx);
    });



    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
    bot.hears('üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏', AuthMiddleware.requireMaster, async (ctx) => {
      await this.getMasterOrdersReport(ctx);
    });


    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^master_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ master_order —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      await this.showMasterOrderDetails(ctx, orderId);
    });

    bot.action(/^master_inwork_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ master_inwork_order —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      await this.showMasterOrderDetails(ctx, orderId);
    });

    bot.action(/^master_modern_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ master_modern_order —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      await this.showMasterOrderDetails(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^master_search_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ master_search_order —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      await this.showMasterOrderDetails(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    bot.on('text', async (ctx, next) => {
      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
      if (ctx.session && ctx.session.searchingMasterOrders) {
        await this.processMasterOrderSearch(ctx, ctx.message.text);
      } else {
        next();
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
  async getMasterNewOrders(ctx) {
    try {
      const masterInfo = ctx.session.userInfo;
      console.log('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ:', masterInfo);
      console.log('üîç –¢–∏–ø cities:', typeof masterInfo?.cities);
      console.log('üîç –ó–Ω–∞—á–µ–Ω–∏–µ cities:', masterInfo?.cities);
      console.log('üîç hasCities —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', hasCities(masterInfo?.cities));
      
      if (!masterInfo || !hasCities(masterInfo.cities)) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const masterCities = parseCities(masterInfo.cities);
      const masterId = masterInfo.id;
      console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞:', masterCities);
      console.log('üîç ID –º–∞—Å—Ç–µ—Ä–∞:', masterId);

      const query = `
        SELECT * FROM orders 
        WHERE status_order = '–û–∂–∏–¥–∞–µ—Ç' 
        AND city = ANY($1)
        AND master_id = $2
        ORDER BY date_meeting ASC 
        LIMIT 50
      `;
      
      const result = await db.getClient().query(query, [masterCities, masterId]);
      const orders = result.rows;

      if (orders.length === 0) {
        ctx.reply('–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      const { Markup } = require('telegraf');
      const buttons = orders.map(order => {
        const date = new Date(order.date_meeting);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        return Markup.button.callback(
          `${order.id} | ${dateStr} ${timeStr}`,
          `master_order_${order.id}`
        );
      });

      const ordersKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

      ctx.reply('üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:', ordersKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞
  async getMasterInWorkOrders(ctx) {
    try {
      const masterInfo = ctx.session.userInfo;
      
      if (!masterInfo || !hasCities(masterInfo.cities)) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const masterCities = parseCities(masterInfo.cities);
      const masterId = masterInfo.id;

      const query = `
        SELECT * FROM orders 
        WHERE status_order IN ('–ü—Ä–∏–Ω—è–ª', '–í –ø—É—Ç–∏', '–í —Ä–∞–±–æ—Ç–µ') 
        AND city = ANY($1)
        AND master_id = $2
        ORDER BY date_meeting ASC 
        LIMIT 50
      `;
      
      const result = await db.getClient().query(query, [masterCities, masterId]);
      const orders = result.rows;

      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è–ª", "–í –ø—É—Ç–∏", "–í —Ä–∞–±–æ—Ç–µ" –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      const { Markup } = require('telegraf');
      const buttons = orders.map(order => {
        const date = new Date(order.date_meeting);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        return Markup.button.callback(
          `${order.id} | ${dateStr} ${timeStr}`,
          `master_inwork_order_${order.id}`
        );
      });

      const ordersKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

      ctx.reply('üîß –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:', ordersKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫');
    }
  }

  // –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
  async searchMasterOrders(ctx) {
    ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
    ctx.session.searchingMasterOrders = true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
  async processMasterOrderSearch(ctx, text) {
    try {
      if (!text || text.trim().length === 0) {
        ctx.reply('‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
      const menuButtons = ['üí∞ –ö–∞—Å—Å–∞', 'üìä –û—Ç—á–µ—Ç—ã', 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'üìã –ó–∞—è–≤–∫–∏', '‚ûï –ü—Ä–∏—Ö–æ–¥', '‚ûñ –†–∞—Å—Ö–æ–¥', 'üìä –ò—Å—Ç–æ—Ä–∏—è', 'üí∞ –ë–∞–ª–∞–Ω—Å'];
      if (menuButtons.includes(text.trim())) {
        console.log(`üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: "${text.trim()}"`);
        return;
      }

      const masterInfo = ctx.session.userInfo;
      if (!masterInfo) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      const masterId = masterInfo.id;
      const searchText = text.trim();
      
      // –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞
      const orders = await db.searchMasterOrder(searchText, masterId);
      
      if (orders.length === 0) {
        ctx.reply(`‚ùå –ó–∞—è–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–∞–º`);
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      await this.showMasterSearchResults(ctx, orders, searchText);
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.searchingMasterOrders;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–æ–∫');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
  async showMasterSearchResults(ctx, orders, searchText) {
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (orders.length === 1) {
      await this.showMasterOrderDetails(ctx, orders[0].id);
      return;
    }

    let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${searchText}"*\n\n`;
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
    const { Markup } = require('telegraf');
    const buttons = orders.map(order => {
      const date = new Date(order.date_meeting);
      const dateStr = date.toLocaleDateString('ru-RU');
      const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      return Markup.button.callback(
        `üìã ${order.id} | ${dateStr} ${timeStr}`,
        `master_search_order_${order.id}`
      );
    });

    const searchKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...searchKeyboard
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
  async showMasterOrderDetails(ctx, orderId) {
    try {
      console.log(`üîç showMasterOrderDetails –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      
      const masterInfo = ctx.session.userInfo;
      const masterId = masterInfo.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–∞—Å—Ç–µ—Ä—É)
      const orders = await db.searchMasterOrder(orderId, masterId);
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ #${orderId} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${masterId}:`, orders);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º');
        return;
      }

      const order = orders[0];
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
      const { escapeMarkdown } = require('../utils/markdown');

      let message = `üìã *‚Ññ${order.id}* | ${escapeMarkdown(order.status_order)}\n\n`;
      message += `üè¢ *–†–ö:* ${escapeMarkdown(order.rk)}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(order.city)}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${escapeMarkdown(order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${escapeMarkdown(order.type_order)}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${escapeMarkdown(order.client_name)}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${escapeMarkdown(order.phone)}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${escapeMarkdown(order.address)}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${escapeMarkdown(order.type_equipment)}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${escapeMarkdown(order.problem)}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${escapeMarkdown(dateStr)} ${escapeMarkdown(timeStr)}\n`;

      ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–Ω–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
  async getMasterModernOrders(ctx) {
    try {
      const masterInfo = ctx.session.userInfo;
      console.log('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –¥–ª—è –º–æ–¥–µ—Ä–Ω–æ–≤:', masterInfo);
      console.log('üîç –¢–∏–ø cities:', typeof masterInfo?.cities);
      console.log('üîç –ó–Ω–∞—á–µ–Ω–∏–µ cities:', masterInfo?.cities);
      console.log('üîç hasCities —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', hasCities(masterInfo?.cities));
      
      if (!masterInfo || !hasCities(masterInfo.cities)) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const masterCities = parseCities(masterInfo.cities);
      console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–Ω–æ–≤:', masterCities);

      // –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
      const masterId = ctx.session.userInfo.id;
      console.log('üîç ID –º–∞—Å—Ç–µ—Ä–∞:', masterId);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –º–æ–¥–µ—Ä–Ω—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö –º–∞—Å—Ç–µ—Ä–∞
      const checkQuery = `
        SELECT * FROM orders 
        WHERE status_order = '–ú–æ–¥–µ—Ä–Ω' 
        AND city = ANY($1)
        LIMIT 5
      `;
      
      const checkResult = await db.getClient().query(checkQuery, [masterCities]);
      console.log('üîç –í—Å–µ –º–æ–¥–µ—Ä–Ω—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö –º–∞—Å—Ç–µ—Ä–∞:', checkResult.rows);
      console.log('üîç master_id –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö:', checkResult.rows.map(o => o.master_id));

      const query = `
        SELECT * FROM orders 
        WHERE status_order = '–ú–æ–¥–µ—Ä–Ω' 
        AND city = ANY($1)
        AND master_id = $2
        ORDER BY date_meeting ASC 
        LIMIT 50
      `;
      
      const result = await db.getClient().query(query, [masterCities, masterId]);
      const orders = result.rows;
      
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ—Ä–Ω–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:', orders.length);
      console.log('üîç –ú–æ–¥–µ—Ä–Ω—ã –º–∞—Å—Ç–µ—Ä–∞:', orders);

      if (orders.length === 0) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ—Ä–Ω—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–∞—Å—Ç–µ—Ä—É
        const allModernsQuery = `
          SELECT id, master_id, city, status_order FROM orders 
          WHERE status_order = '–ú–æ–¥–µ—Ä–Ω' 
          AND city = ANY($1)
          ORDER BY date_meeting ASC 
          LIMIT 10
        `;
        const allModernsResult = await db.getClient().query(allModernsQuery, [masterCities]);
        console.log('üîç –í—Å–µ –º–æ–¥–µ—Ä–Ω—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö –º–∞—Å—Ç–µ—Ä–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ master_id):', allModernsResult.rows);
        
        ctx.reply('–í–∞—à–∏—Ö –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      const { Markup } = require('telegraf');
      const buttons = orders.map(order => {
        const date = new Date(order.date_meeting);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        return Markup.button.callback(
          `${order.id} | ${dateStr} ${timeStr}`,
          `master_modern_order_${order.id}`
        );
      });

      const ordersKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

      ctx.reply('üîÑ –ú–æ–¥–µ—Ä–Ω—ã –º–∞—Å—Ç–µ—Ä–∞:', ordersKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–Ω–æ–≤ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–Ω–æ–≤');
    }
  }


  // –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –º–∞—Å—Ç–µ—Ä–∞
  async getMasterOrdersReport(ctx) {
    try {
      const masterInfo = ctx.session.userInfo;
      
      if (!masterInfo || !hasCities(masterInfo.cities)) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const masterCities = parseCities(masterInfo.cities);
      const masterId = masterInfo.id;

      const query = `
        SELECT 
          COUNT(*) as total_orders,
          COUNT(CASE WHEN status_order = '–û–∂–∏–¥–∞–µ—Ç' THEN 1 END) as pending_orders,
          COUNT(CASE WHEN status_order = '–í —Ä–∞–±–æ—Ç–µ' THEN 1 END) as in_work_orders,
          COUNT(CASE WHEN status_order = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' THEN 1 END) as completed_orders
        FROM orders 
        WHERE city = ANY($1)
        AND master_id = $2
      `;
      
      const result = await db.getClient().query(query, [masterCities, masterId]);
      const report = result.rows[0];

      let message = 'üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –º–∞—Å—Ç–µ—Ä–∞:\n\n';
      message += `üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${report.total_orders}\n`;
      message += `‚è≥ –û–∂–∏–¥–∞—é—Ç: ${report.pending_orders}\n`;
      message += `‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ: ${report.in_work_orders}\n`;
      message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${report.completed_orders}\n\n`;
      message += `üèôÔ∏è –ì–æ—Ä–æ–¥–∞: ${masterCities.join(', ')}`;

      ctx.reply(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
    }
  }

}

module.exports = new MasterHandler();


