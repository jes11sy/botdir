const db = require('../../config/database');
const { Markup } = require('telegraf');
const { escapeMarkdown } = require('../../utils/markdown');

class OrderDetailsHandler {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞—è–≤–∫—É
  async handleOrderClick(ctx, orderId) {
    try {
      console.log(`üîç handleOrderClick –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
      const orders = await db.searchOrder(orderId);
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ #${orderId}:`, orders);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      

      let message = `üìã *‚Ññ${order.id}* | ${escapeMarkdown(order.status_order)}\n\n`;
      message += `üè¢ *–†–ö:* ${escapeMarkdown(order.rk)}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(order.city)}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${escapeMarkdown(order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${escapeMarkdown(order.type_order)}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${escapeMarkdown(order.client_name)}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${escapeMarkdown(order.phone)}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${escapeMarkdown(order.address)}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${escapeMarkdown(order.type_equipment)}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${escapeMarkdown(order.problem)}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${escapeMarkdown(dateStr)} ${escapeMarkdown(timeStr)}\n`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞" —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç"
      if (order.status_order === '–û–∂–∏–¥–∞–µ—Ç') {
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', `assign_master_${order.id}`)]
        ]);

        ctx.reply(message, { 
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        ctx.reply(message, { 
          parse_mode: 'Markdown'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    async handleAssignMaster(ctx, orderId) {
      try {
        console.log(`üîç handleAssignMaster –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
        if (!directorInfo || !directorInfo.cities || directorInfo.cities.length === 0) {
          ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }

        console.log(`üîç –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:`, directorInfo.cities);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –∏–º–µ—é—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –≥–æ—Ä–æ–¥–∞ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º
        const masters = await db.getClient().query(`
          SELECT id, name, cities, status_work, chat_id, tg_id
          FROM master 
          WHERE status_work = '—Ä–∞–±–æ—Ç–∞–µ—Ç' 
          AND cities && $1
          ORDER BY name ASC
          LIMIT 50
        `, [directorInfo.cities]);
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤:`, masters.rows.length);
        console.log(`üîç –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:`, masters.rows);
        
        if (masters.rows.length === 0) {
          ctx.reply('–†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          return;
        }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
      const buttons = masters.rows.map(master => {
        const cities = Array.isArray(master.cities) ? master.cities.join(', ') : master.cities;
        const callbackData = `select_master_${orderId}_${master.id}`;
        console.log(`üîç –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:`, {
          name: master.name,
          cities: cities,
          callbackData: callbackData
        });
        return Markup.button.callback(
          `${master.name} (${cities})`,
          callbackData
        );
      });

      console.log(`üîç –°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫:`, buttons.length);
      console.log(`üîç Callback data –∫–Ω–æ–ø–æ–∫:`, buttons.map(b => b.callback_data));
      const keyboard = Markup.inlineKeyboard(buttons, { columns: 1 });
      
      console.log(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Å—Ç–µ—Ä–∞`);
      ctx.reply('üë®‚Äçüîß –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤');
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É
  async assignMasterToOrder(ctx, orderId, masterId) {
    try {
      console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:`, {
        orderId: orderId,
        masterId: masterId
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const orders = await db.searchOrder(orderId);
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏:`, orders);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:`, order);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
      const masters = await db.getClient().query(`
        SELECT id, name, chat_id, tg_id, cities
        FROM master 
        WHERE id = $1
      `, [masterId]);

      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:`, masters.rows);

      if (masters.rows.length === 0) {
        ctx.reply('–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const master = masters.rows[0];
      console.log(`‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω:`, master);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
      console.log(`üîç –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É #${orderId} –≤ –ë–î:`, {
        masterId: masterId,
        orderId: orderId
      });

      const updateResult = await db.getClient().query(`
        UPDATE orders 
        SET master_id = $1
        WHERE id = $2
      `, [masterId, orderId]);

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î:`, updateResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –º–∞—Å—Ç–µ—Ä—É
      console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ #${orderId} –º–∞—Å—Ç–µ—Ä—É ${master.name}`);
      await this.sendOrderToMaster(ctx, order, master);

      ctx.reply(`‚úÖ –ú–∞—Å—Ç–µ—Ä ${master.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
  async sendOrderToMaster(ctx, order, master) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É #${order.id} –º–∞—Å—Ç–µ—Ä—É:`, {
        masterName: master.name,
        masterChatId: master.chat_id,
        masterTgId: master.tg_id
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞ chat_id
      if (!master.chat_id) {
        console.log(`‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ ${master.name} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id`);
        ctx.reply(`‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ ${master.name} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id. –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
        return;
      }

      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        let message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\n`;
        message += `üìã *‚Ññ${order.id}* | ${order.status_order}\n\n`;
        message += `üè¢ *–†–ö:* ${order.rk}\n`;
        message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
        message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
        message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
        message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
        message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
        message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
        message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
        message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${master.name}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', `accept_order_${order.id}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', `reject_order_${order.id}`)]
      ]);

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É ${master.name} –≤ —á–∞—Ç ${master.chat_id}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
      const result = await ctx.telegram.sendMessage(master.chat_id, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É ${master.name} (chat_id: ${master.chat_id})`);
      console.log(`üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:`, result);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        errorMessage: error.message,
        errorCode: error.code,
        masterName: master.name,
        masterChatId: master.chat_id
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É ${master.name}: ${error.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
  async handleMasterAcceptOrder(ctx, orderId) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–ü—Ä–∏–Ω—è–ª"
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–ü—Ä–∏–Ω—è–ª'
        WHERE id = $1
      `, [orderId]);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        const masters = await db.getClient().query(`
          SELECT name FROM master WHERE id = $1
        `, [order.master_id]);
        
        const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        let message = `üìã *‚Ññ${orderId}* | –ü—Ä–∏–Ω—è–ª\n\n`;
        message += `üè¢ *–†–ö:* ${order.rk}\n`;
        message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
        message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
        message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
        message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
        message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
        message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
        message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
        message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –ø—É—Ç–∏"
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üöó –í –ø—É—Ç–∏', `on_way_${orderId}`)]
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log(`–ó–∞—è–≤–∫–∞ #${orderId} –ø—Ä–∏–Ω—è—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–º`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
  async handleMasterRejectOrder(ctx, orderId) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–û–∂–∏–¥–∞–µ—Ç" –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–û–∂–∏–¥–∞–µ—Ç', master_id = NULL
        WHERE id = $1
      `, [orderId]);

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
      let message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\n`;
      message += `üìã *‚Ññ${orderId}*\n\n`;
      message += `‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º*`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown'
      });

      console.log(`–ó–∞—è–≤–∫–∞ #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–í –ø—É—Ç–∏"
  async handleOnWay(ctx, orderId) {
    try {
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–í –ø—É—Ç–∏'
        WHERE id = $1
      `, [orderId]);

      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        const masters = await db.getClient().query(`
          SELECT name FROM master WHERE id = $1
        `, [order.master_id]);
        
        const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        let message = `üìã *‚Ññ${orderId}* | –í –ø—É—Ç–∏\n\n`;
        message += `üè¢ *–†–ö:* ${order.rk}\n`;
        message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
        message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
        message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
        message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
        message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
        message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
        message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
        message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîß –í —Ä–∞–±–æ—Ç–µ', `in_work_${orderId}`)]
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏":', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏"');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ"
  async handleInWork(ctx, orderId) {
    try {
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–í —Ä–∞–±–æ—Ç–µ'
        WHERE id = $1
      `, [orderId]);

      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        const masters = await db.getClient().query(`
          SELECT name FROM master WHERE id = $1
        `, [order.master_id]);
        
        const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        let message = `üìã *‚Ññ${orderId}* | –í —Ä–∞–±–æ—Ç–µ\n\n`;
        message += `üè¢ *–†–ö:* ${order.rk}\n`;
        message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
        message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
        message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
        message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
        message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
        message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
        message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
        message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}`;

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', `final_status_${orderId}_–ì–æ—Ç–æ–≤–æ`)],
          [Markup.button.callback('‚ùå –û—Ç–∫–∞–∑', `final_status_${orderId}_–û—Ç–∫–∞–∑`)],
          [Markup.button.callback('üîÑ –ú–æ–¥–µ—Ä–Ω', `final_status_${orderId}_–ú–æ–¥–µ—Ä–Ω`)],
          [Markup.button.callback('üö´ –ù–µ–∑–∞–∫–∞–∑', `final_status_${orderId}_–ù–µ–∑–∞–∫–∞–∑`)]
        ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        ctx.session = ctx.session || {};
        ctx.session.orderMessageId = ctx.callbackQuery.message.message_id;

        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        global.orderMessages = global.orderMessages || {};
        global.orderMessages[orderId] = {
          messageId: ctx.callbackQuery.message.message_id,
          chatId: ctx.chat.id
        };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í —Ä–∞–±–æ—Ç–µ":', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í —Ä–∞–±–æ—Ç–µ"');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–ú–æ–¥–µ—Ä–Ω" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏
  async handleModernStatus(ctx, orderId) {
    try {
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–ú–æ–¥–µ—Ä–Ω'
        WHERE id = $1
      `, [orderId]);

      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
      const masters = await db.getClient().query(`
        SELECT name FROM master WHERE id = $1
      `, [order.master_id]);
      
      const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

      let message = `üìã *‚Ññ${orderId}* | –ú–æ–¥–µ—Ä–Ω\n\n`;
      message += `üè¢ *–†–ö:* ${order.rk}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
      message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è "–ì–æ—Ç–æ–≤–æ" –∏ "–û—Ç–∫–∞–∑"
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', `final_status_${orderId}_–ì–æ—Ç–æ–≤–æ`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–∞–∑', `final_status_${orderId}_–û—Ç–∫–∞–∑`)]
      ]);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      try {
        if (ctx.session && ctx.session.orderMessageId) {
          await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.orderMessageId);
        }
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π:', error.message);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const sentMessage = await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      global.orderMessages = global.orderMessages || {};
      global.orderMessages[orderId] = {
        messageId: sentMessage.message_id,
        chatId: ctx.chat.id
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ú–æ–¥–µ—Ä–Ω":', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ú–æ–¥–µ—Ä–Ω"');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  async handleFinalStatus(ctx, orderId, status) {
    try {
      console.log(`üîç handleFinalStatus: orderId=${orderId}, status=${status}`);
      console.log(`üîç global.orderMessages:`, global.orderMessages);

      await db.getClient().query(`
        UPDATE orders 
        SET status_order = $1, closing_data = NOW()
        WHERE id = $2
      `, [status, orderId]);

      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
      const masters = await db.getClient().query(`
        SELECT name FROM master WHERE id = $1
      `, [order.master_id]);
      
      const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

      let message = `üìã *‚Ññ${orderId}* | ${status}\n\n`;
      message += `üè¢ *–†–ö:* ${order.rk}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
      message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}`;

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      try {
        if (global.orderMessages && global.orderMessages[orderId]) {
          const messageInfo = global.orderMessages[orderId];
          await ctx.telegram.deleteMessage(messageInfo.chatId, messageInfo.messageId);
          delete global.orderMessages[orderId];
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π #${orderId}:`, error.message);
        // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
        if (global.orderMessages && global.orderMessages[orderId]) {
          delete global.orderMessages[orderId];
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–ì–æ—Ç–æ–≤–æ" - –∑–∞–ø—Ä–æ—Å –∏—Ç–æ–≥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
  async handleReadyStatus(ctx, orderId) {
    try {
      console.log(`üîç handleReadyStatus: orderId=${orderId}`);
      console.log(`üîç global.orderMessages:`, global.orderMessages);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º
      ctx.session = ctx.session || {};
      ctx.session.waitingForAmounts = true;
      ctx.session.orderId = orderId;
      
      ctx.reply('üí∞ –£–∫–∞–∂–∏—Ç–µ –∏—Ç–æ–≥ –∏ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 1000):\n\nüìù *–í –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—É–º–º:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—É–º–º');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏—Ç–æ–≥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
  async processAmountsInput(ctx, text) {
    try {
      const parts = text.trim().split(' ');
      
      if (parts.length !== 2) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∏—Ç–æ–≥ –∏ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 1000):');
        return;
      }

      const result = parseFloat(parts[0]);
      const expenditure = parseFloat(parts[1]);

      if (isNaN(result) || isNaN(expenditure) || result < 0 || expenditure < 0) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –£–∫–∞–∂–∏—Ç–µ –∏—Ç–æ–≥ –∏ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 1000):');
        return;
      }

      const orderId = ctx.session.orderId;
      
      // –†–∞—Å—á–µ—Ç —á–∏—Å—Ç—ã–º–∏ –∏ —Å–¥–∞—á–∏ –º–∞—Å—Ç–µ—Ä–∞
      const clean = result - expenditure;
      const masterChange = clean / 2;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
      await db.getClient().query(`
        UPDATE orders 
        SET status_order = '–ì–æ—Ç–æ–≤–æ', result = $1, expenditure = $2, clean = $3, master_change = $4, closing_data = NOW()
        WHERE id = $5
      `, [result, expenditure, clean, masterChange, orderId]);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å—É (–ø—Ä–∏—Ö–æ–¥)
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        const orders = await db.searchOrder(orderId);
        const order = orders[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –¥–ª—è note
        const masters = await db.getClient().query(`
          SELECT name FROM master WHERE id = $1
        `, [order.master_id]);
        
        const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ cash —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        await db.getClient().query(`
          INSERT INTO cash (name, amount, city, note, name_create, payment_purpose, date_create, created_at, updated_at)
          VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW(), NOW())
        `, [
          '–ø—Ä–∏—Ö–æ–¥',
          masterChange,  // —Å–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞
          order.city,
          `${masterName} - –ò—Ç–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É: ${result}‚ÇΩ`,
          '–°–∏—Å—Ç–µ–º–∞ –ë–æ—Ç',
          `–ó–∞–∫–∞–∑ ‚Ññ${orderId}`
        ]);
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å—É: –ø—Ä–∏—Ö–æ–¥ ${masterChange} —Ä—É–±. –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ${orderId}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Å—Å—É:', error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ –º–∞—Å—Ç–µ—Ä–µ
      const orders = await db.searchOrder(orderId);
      const order = orders[0];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
      const masters = await db.getClient().query(`
        SELECT name FROM master WHERE id = $1
      `, [order.master_id]);
      
      const masterName = masters.rows.length > 0 ? masters.rows[0].name : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      let message = `üìã *‚Ññ${orderId}* | –ì–æ—Ç–æ–≤–æ\n\n`;
      message += `üè¢ *–†–ö:* ${order.rk}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
      message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${masterName}\n`;
      message += `üí∞ *–ò—Ç–æ–≥:* ${result}\n`;
      message += `üí∏ *–†–∞—Å—Ö–æ–¥:* ${expenditure}\n`;
      message += `üíµ *–ß–∏—Å—Ç—ã–º–∏:* ${clean}\n\n`;
      message += `üíº *–°–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞:* ${masterChange}`;

      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—è–≤–∫–æ–π –∏–∑ —Å–µ—Å—Å–∏–∏
        if (ctx.session.orderMessageId) {
          await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.orderMessageId);
        }
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π:', error.message);
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      try {
        if (global.orderMessages && global.orderMessages[orderId]) {
          const messageInfo = global.orderMessages[orderId];
          await ctx.telegram.deleteMessage(messageInfo.chatId, messageInfo.messageId);
          delete global.orderMessages[orderId];
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π #${orderId}:`, error.message);
        // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
        if (global.orderMessages && global.orderMessages[orderId]) {
          delete global.orderMessages[orderId];
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      await ctx.reply(message, {
        parse_mode: 'Markdown'
      });

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.waitingForAmounts;
      delete ctx.session.orderId;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º');
    }
  }


  setupHandlers(bot) {
    console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OrderDetailsHandler');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^select_master_(\d+)_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      const masterId = ctx.match[2];
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ —Å—Ä–∞–±–æ—Ç–∞–ª:`, {
        orderId: orderId,
        masterId: masterId
      });
      
      try {
        await this.assignMasterToOrder(ctx, orderId, masterId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫—É –∑–∞—è–≤–∫–∏
    bot.action(/^order_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞—è–≤–∫—É —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      this.handleOrderClick(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"
    bot.action(/^assign_master_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞" —Å—Ä–∞–±–æ—Ç–∞–ª: orderId = ${orderId}`);
      this.handleAssignMaster(ctx, orderId);
    });


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
    bot.action(/^accept_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      try {
        await this.handleMasterAcceptOrder(ctx, orderId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
    bot.action(/^reject_order_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      try {
        await this.handleMasterRejectOrder(ctx, orderId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–í –ø—É—Ç–∏"
    bot.action(/^on_way_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      try {
        await this.handleOnWay(ctx, orderId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏":', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏"');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–í —Ä–∞–±–æ—Ç–µ"
    bot.action(/^in_work_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      try {
        await this.handleInWork(ctx, orderId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í —Ä–∞–±–æ—Ç–µ":', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–í —Ä–∞–±–æ—Ç–µ"');
      }
    });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
      bot.action(/^final_status_(\d+)_(.+)$/, async (ctx) => {
        const orderId = ctx.match[1];
        const status = ctx.match[2];
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
          const orders = await db.searchOrder(orderId);
          if (!orders || orders.length === 0) {
            ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
          }

          const order = orders[0];
          const currentStatus = order.status_order;
          
          // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–∫—Ä—ã—Ç, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
          if (['–ì–æ—Ç–æ–≤–æ', '–û—Ç–∫–∞–∑', '–ù–µ–∑–∞–∫–∞–∑'].includes(currentStatus)) {
            ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${orderId} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${currentStatus}". –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.`);
            return;
          }

          if (status === '–ì–æ—Ç–æ–≤–æ') {
            await this.handleReadyStatus(ctx, orderId);
          } else if (status === '–ú–æ–¥–µ—Ä–Ω') {
            await this.handleModernStatus(ctx, orderId);
          } else {
            await this.handleFinalStatus(ctx, orderId, status);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ:', error);
          ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ');
        }
      });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏—Ç–æ–≥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
    bot.on('text', async (ctx, next) => {
      if (ctx.session && ctx.session.waitingForAmounts) {
        await this.processAmountsInput(ctx, ctx.message.text);
      } else {
        next();
      }
    });
  }
}

module.exports = new OrderDetailsHandler();
