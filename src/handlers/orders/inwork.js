const db = require('../../config/database');
const { Markup } = require('telegraf');
const { escapeMarkdown } = require('../../utils/markdown');

class InWorkOrdersHandler {
  // –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
  async getInWorkOrders(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      if (!directorInfo || !directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const directorCities = directorInfo.cities;
      console.log(`üîç –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:`, directorCities);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏
      const query = `
        SELECT * FROM orders 
        WHERE status_order IN ('–ü—Ä–∏–Ω—è–ª', '–í –ø—É—Ç–∏', '–í —Ä–∞–±–æ—Ç–µ')
        AND city = ANY($1)
        ORDER BY date_meeting ASC 
        LIMIT 10
      `;
      
      const result = await db.getClient().query(query, [directorCities]);
      const orders = result.rows;

      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è–ª", "–í –ø—É—Ç–∏", "–í —Ä–∞–±–æ—Ç–µ" –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      const buttons = orders.map(order => {
        const date = new Date(order.date_meeting);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        return Markup.button.callback(
          `${order.id} | ${dateStr} ${timeStr}`,
          `inwork_order_${order.id}`
        );
      });

      const ordersKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

      ctx.reply('üìã –ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è–ª", "–í –ø—É—Ç–∏", "–í —Ä–∞–±–æ—Ç–µ":', ordersKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ
  async showInWorkOrderDetails(ctx, orderId) {
    try {
      const orders = await db.searchOrder(orderId);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      

      let message = `üìã *‚Ññ${order.id}* | ${escapeMarkdown(order.status_order)}\n\n`;
      message += `üè¢ *–†–ö:* ${escapeMarkdown(order.rk)}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(order.city)}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${escapeMarkdown(order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${escapeMarkdown(order.type_order)}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${escapeMarkdown(order.client_name)}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${escapeMarkdown(order.phone)}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${escapeMarkdown(order.address)}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${escapeMarkdown(order.type_equipment)}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${escapeMarkdown(order.problem)}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${escapeMarkdown(dateStr)} ${escapeMarkdown(timeStr)}\n`;
      message += `üë®‚Äçüîß *–ú–∞—Å—Ç–µ—Ä:* ${escapeMarkdown(order.master_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n`;

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë®‚Äçüîß –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', `inwork_change_master_${order.id}`)],
        [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `inwork_change_status_${order.id}`)]
      ]);

      ctx.reply(message, { 
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
  async changeMaster(ctx, orderId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      if (!directorInfo || !directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      console.log(`üîç –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:`, directorInfo.cities);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –∏–º–µ—é—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –≥–æ—Ä–æ–¥–∞ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º
      const masters = await db.getClient().query(`
        SELECT id, name, cities, status_work, chat_id, tg_id
        FROM master 
        WHERE status_work = '—Ä–∞–±–æ—Ç–∞–µ—Ç' 
        AND cities && $1
        ORDER BY name ASC
        LIMIT 50
      `, [directorInfo.cities]);
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤:`, masters.rows.length);
      console.log(`üîç –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:`, masters.rows);
      
      if (masters.rows.length === 0) {
        ctx.reply('–†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
      const buttons = masters.rows.map(master => {
        const cities = Array.isArray(master.cities) ? master.cities.join(', ') : master.cities;
        return Markup.button.callback(
          `${master.name} (${cities})`,
          `inwork_select_master_${orderId}_${master.id}`
        );
      });

      const keyboard = Markup.inlineKeyboard(buttons, { columns: 1 });
      
      ctx.reply('üë®‚Äçüîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤');
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  async changeStatus(ctx, orderId) {
    try {
      console.log(`üîç changeStatus –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      const statusButtons = [
        [Markup.button.callback('‚è≥ –û–∂–∏–¥–∞–µ—Ç', `inwork_set_status_${orderId}_–û–∂–∏–¥–∞–µ—Ç`)],
        [Markup.button.callback('üîÑ –ú–æ–¥–µ—Ä–Ω', `inwork_set_status_${orderId}_–ú–æ–¥–µ—Ä–Ω`)],
        [Markup.button.callback('‚ùå –ù–µ–∑–∞–∫–∞–∑', `inwork_set_status_${orderId}_–ù–µ–∑–∞–∫–∞–∑`)]
      ];

      console.log(`üîç –°–æ–∑–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:`, statusButtons.map(btn => btn[0].callback_data));

      const keyboard = Markup.inlineKeyboard(statusButtons);
      
      console.log(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  async setStatus(ctx, orderId, status) {
    try {
      console.log(`üîç setStatus –≤—ã–∑–≤–∞–Ω: orderId=${orderId}, status=${status}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const checkOrder = await db.searchOrder(orderId);
      if (checkOrder.length === 0) {
        console.log(`‚ùå –ó–∞—è–≤–∫–∞ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        ctx.reply(`‚ùå –ó–∞—è–≤–∫–∞ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }
      
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${orderId} –Ω–∞–π–¥–µ–Ω–∞, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${checkOrder[0].status_order}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å: UPDATE orders SET status_order = '${status}' WHERE id = ${orderId}`);
      
      const updateResult = await db.getClient().query(`
        UPDATE orders 
        SET status_order = $1
        WHERE id = $2
      `, [status, orderId]);
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –Ω–∞ "${status}":`, updateResult);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:`, updateResult.rowCount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      if (updateResult.rowCount === 0) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É #${orderId}`);
        ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É #${orderId}`);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
      const verifyOrder = await db.searchOrder(orderId);
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${orderId} = ${verifyOrder[0].status_order}`);
      
      ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É
  async assignNewMasterToOrder(ctx, orderId, newMasterId) {
    try {
      console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:`, {
        orderId: orderId,
        newMasterId: newMasterId
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const orders = await db.searchOrder(orderId);
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏:`, orders);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:`, order);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–º –º–∞—Å—Ç–µ—Ä–µ
      let oldMasterName = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
      if (order.master_id) {
        const oldMasters = await db.getClient().query(`
          SELECT name, chat_id FROM master WHERE id = $1
        `, [order.master_id]);
        
        if (oldMasters.rows.length > 0) {
          oldMasterName = oldMasters.rows[0].name;
          const oldMasterChatId = oldMasters.rows[0].chat_id;
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏
          if (oldMasterChatId) {
            try {
              await ctx.telegram.sendMessage(oldMasterChatId, 
                `‚ùå –ó–∞—è–≤–∫–∞ #${orderId} –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π.`
              );
              console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–º—É –º–∞—Å—Ç–µ—Ä—É ${oldMasterName}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:`, error.message);
            }
          }
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Å—Ç–µ—Ä–µ
      const newMasters = await db.getClient().query(`
        SELECT id, name, chat_id, tg_id, cities
        FROM master 
        WHERE id = $1
      `, [newMasterId]);

      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:`, newMasters.rows);

      if (newMasters.rows.length === 0) {
        ctx.reply('–ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const newMaster = newMasters.rows[0];
      console.log(`‚úÖ –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω:`, newMaster);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
      console.log(`üîç –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É #${orderId} –≤ –ë–î:`, {
        newMasterId: newMasterId,
        orderId: orderId
      });

      const updateResult = await db.getClient().query(`
        UPDATE orders 
        SET master_id = $1, status_order = '–û–∂–∏–¥–∞–µ—Ç'
        WHERE id = $2
      `, [newMasterId, orderId]);

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î:`, updateResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É
      console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ #${orderId} –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É ${newMaster.name}`);
      const sentMessage = await this.sendOrderToNewMaster(ctx, order, newMaster);

      // –û–±–Ω–æ–≤–ª—è–µ–º global.orderMessages –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
      if (sentMessage && sentMessage.message_id) {
        global.orderMessages = global.orderMessages || {};
        global.orderMessages[orderId] = {
          messageId: sentMessage.message_id,
          chatId: newMaster.chat_id
        };
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω global.orderMessages –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      }

      ctx.reply(`‚úÖ –ú–∞—Å—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω —Å "${oldMasterName}" –Ω–∞ "${newMaster.name}" –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É
  async sendOrderToNewMaster(ctx, order, master) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É #${order.id} –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É:`, {
        masterName: master.name,
        masterChatId: master.chat_id,
        masterTgId: master.tg_id
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞ chat_id
      if (!master.chat_id) {
        console.log(`‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ ${master.name} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id`);
        ctx.reply(`‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ ${master.name} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id. –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
        return;
      }

      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      let message = `üîî *–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–∞–º*\n\n`;
      message += `üìã *‚Ññ${order.id}* | –û–∂–∏–¥–∞–µ—Ç\n\n`;
      message += `üè¢ *–†–ö:* ${order.rk}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
      message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${master.name}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ (–∑–∞—è–≤–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç" –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞)
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', `accept_order_${order.id}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', `reject_order_${order.id}`)]
      ]);

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É ${master.name} –≤ —á–∞—Ç ${master.chat_id}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É
      const result = await ctx.telegram.sendMessage(master.chat_id, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É ${master.name} (chat_id: ${master.chat_id})`);
      console.log(`üì® –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:`, result);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        errorMessage: error.message,
        errorCode: error.code,
        masterName: master.name,
        masterChatId: master.chat_id
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É ${master.name}: ${error.message}`);
    }
  }

  setupHandlers(bot) {
    console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ InWorkOrdersHandler');
    
    bot.hears('‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ', (ctx) => this.getInWorkOrders(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç–µ
    bot.action(/^inwork_order_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      this.showInWorkOrderDetails(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"
    bot.action(/^inwork_change_master_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inwork_change_master —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      this.changeMaster(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    bot.action(/^inwork_change_status_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inwork_change_status —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ #${orderId}`);
      this.changeStatus(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ "–í —Ä–∞–±–æ—Ç–µ"
    bot.action(/^inwork_select_master_(\d+)_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      const masterId = ctx.match[2];
      
      try {
        await this.assignNewMasterToOrder(ctx, orderId, masterId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    bot.action(/^inwork_set_status_(\d+)_(.+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      const status = ctx.match[2];
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inwork_set_status —Å—Ä–∞–±–æ—Ç–∞–ª: orderId=${orderId}, status=${status}`);
      await this.setStatus(ctx, orderId, status);
    });
  }
}

module.exports = new InWorkOrdersHandler();
