const db = require('../../config/database');
const { Markup } = require('telegraf');
const { escapeMarkdown } = require('../../utils/markdown');
const AuthMiddleware = require('../../middleware/auth');

class ModernOrdersHandler {
  // –ú–æ–¥–µ—Ä–Ω—ã –∑–∞—è–≤–∫–∏
  async getModernOrders(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      if (!directorInfo || !directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      const directorCities = directorInfo.cities;
      console.log(`üîç –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:`, directorCities);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏
      const query = `
        SELECT * FROM orders 
        WHERE status_order = '–ú–æ–¥–µ—Ä–Ω' 
        AND city = ANY($1)
        ORDER BY date_meeting ASC 
        LIMIT 50
      `;
      
      const result = await db.getClient().query(query, [directorCities]);
      const orders = result.rows;
      
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ—Ä–Ω–æ–≤ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', orders.length);
      console.log('üîç –ú–æ–¥–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', orders.map(o => ({ id: o.id, master_id: o.master_id, city: o.city, date: o.date_meeting })));

      if (orders.length === 0) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ—Ä–Ω—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        const allModernsQuery = `SELECT id, master_id, city, status_order FROM orders WHERE status_order = '–ú–æ–¥–µ—Ä–Ω' LIMIT 10`;
        const allModernsResult = await db.getClient().query(allModernsQuery);
        console.log('üîç –í—Å–µ –º–æ–¥–µ—Ä–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:', allModernsResult.rows);
        
        ctx.reply('–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ú–æ–¥–µ—Ä–Ω" –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      const buttons = orders.map(order => {
        const date = new Date(order.date_meeting);
        const dateStr = date.toLocaleDateString('ru-RU');
        const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        return Markup.button.callback(
          `${order.id} | ${dateStr} ${timeStr}`,
          `modern_order_${order.id}`
        );
      });

      const ordersKeyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

      ctx.reply('üìã –ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ú–æ–¥–µ—Ä–Ω":', ordersKeyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–Ω–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ—Ä–Ω–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
  async showModernOrderDetails(ctx, orderId) {
    try {
      const orders = await db.searchOrder(orderId);
      
      if (orders.length === 0) {
        ctx.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      

      let message = `üìã *‚Ññ${order.id}* | ${escapeMarkdown(order.status_order)}\n\n`;
      message += `üè¢ *–†–ö:* ${escapeMarkdown(order.rk)}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${escapeMarkdown(order.city)}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${escapeMarkdown(order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${escapeMarkdown(order.type_order)}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${escapeMarkdown(order.client_name)}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${escapeMarkdown(order.phone)}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${escapeMarkdown(order.address)}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${escapeMarkdown(order.type_equipment)}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${escapeMarkdown(order.problem)}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${escapeMarkdown(dateStr)} ${escapeMarkdown(timeStr)}\n`;
      message += `üë®‚Äçüîß *–ú–∞—Å—Ç–µ—Ä:* ${escapeMarkdown(order.master_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n`;

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–Ω–æ–≤
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É', `remind_master_${order.id}`)],
        [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `change_status_${order.id}`)]
      ]);

      ctx.reply(message, { 
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  }

  // –ù–∞–ø–æ–º–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É
  async remindMaster(ctx, orderId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
      const orders = await db.searchOrder(orderId);
      if (!orders || orders.length === 0) {
        ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const order = orders[0];

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
      if (!order.master_id) {
        ctx.reply('‚ùå –£ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä');
        return;
      }

      const masters = await db.getClient().query(`
        SELECT id, name, chat_id, tg_id
        FROM master
        WHERE id = $1
      `, [order.master_id]);

      if (!masters.rows.length) {
        ctx.reply('‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const master = masters.rows[0];
      if (!master.chat_id) {
        ctx.reply(`‚ùå –£ –º–∞—Å—Ç–µ—Ä–∞ ${master.name} –Ω–µ —É–∫–∞–∑–∞–Ω chat_id. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const meetingDate = new Date(order.date_meeting);
      const dateStr = meetingDate.toLocaleDateString('ru-RU');
      const timeStr = meetingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      let message = `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ*\n\n`;
      message += `üìã *‚Ññ${order.id}* | ${order.status_order}\n\n`;
      message += `üè¢ *–†–ö:* ${order.rk}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${order.city}\n`;
      message += `üë®‚Äçüîß *–ò–º—è –º–∞—Å—Ç–µ—Ä–∞:* ${order.avito_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìù *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${order.type_order}\n\n`;
      message += `üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.client_name}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${order.phone}\`\n`;
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.address}\n\n`;
      message += `üîß *–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:* ${order.type_equipment}\n`;
      message += `‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${order.problem}\n\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:* ${dateStr} ${timeStr}\n\n`;
      message += `üë®‚Äçüîß *–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä:* ${master.name}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ì–æ—Ç–æ–≤–æ –∏ –û—Ç–∫–∞–∑)
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', `final_status_${orderId}_–ì–æ—Ç–æ–≤–æ`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–∞–∑', `final_status_${orderId}_–û—Ç–∫–∞–∑`)]
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–∞—Å—Ç–µ—Ä—É
      const sentMessage = await ctx.telegram.sendMessage(master.chat_id, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      global.orderMessages = global.orderMessages || {};
      global.orderMessages[orderId] = {
        messageId: sentMessage.message_id,
        chatId: master.chat_id
      };

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
      ctx.reply(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É ${master.name} –ø–æ –∑–∞—è–≤–∫–µ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  async changeStatus(ctx, orderId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      const statusButtons = [
        [Markup.button.callback('‚è≥ –û–∂–∏–¥–∞–µ—Ç', `set_status_${orderId}_–û–∂–∏–¥–∞–µ—Ç`)],
        [Markup.button.callback('‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ', `set_status_${orderId}_–í —Ä–∞–±–æ—Ç–µ`)],
        [Markup.button.callback('‚ùå –ù–µ–∑–∞–∫–∞–∑', `set_status_${orderId}_–ù–µ–∑–∞–∫–∞–∑`)]
      ];

      const keyboard = Markup.inlineKeyboard(statusButtons);
      
      ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
  async setStatus(ctx, orderId, status) {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
      ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  setupHandlers(bot) {
    bot.hears('üîÑ –ú–æ–¥–µ—Ä–Ω—ã', AuthMiddleware.requireDirector, (ctx) => this.getModernOrders(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–æ–¥–µ—Ä–Ω –∑–∞—è–≤–∫—É
    bot.action(/^modern_order_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      this.showModernOrderDetails(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É"
    bot.action(/^remind_master_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      this.remindMaster(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    bot.action(/^change_status_(\d+)$/, (ctx) => {
      const orderId = ctx.match[1];
      this.changeStatus(ctx, orderId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    bot.action(/^set_status_(\d+)_(.+)$/, (ctx) => {
      const orderId = ctx.match[1];
      const status = ctx.match[2];
      this.setStatus(ctx, orderId, status);
    });
  }
}

module.exports = new ModernOrdersHandler();
