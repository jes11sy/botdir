const db = require('../config/database');
const { employeesMenu } = require('../keyboards/menus');
const { Markup } = require('telegraf');
const AuthMiddleware = require('../middleware/auth');

class EmployeesHandler {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  async getOperators(ctx) {
    try {
      const operators = await db.getOperators(10);

      if (operators.length === 0) {
        ctx.reply('–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = 'üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n';
      operators.forEach((operator, index) => {
        message += `${index + 1}. ${operator.name}\n`;
        message += `   –õ–æ–≥–∏–Ω: ${operator.login}\n`;
        message += `   –ì–æ—Ä–æ–¥: ${operator.city}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${operator.status}\n\n`;
      });

      ctx.reply(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getMasters(ctx, page = 1) {
    try {
      const itemsPerPage = 10;
      const offset = (page - 1) * itemsPerPage;

      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      
      if (!directorInfo) {
        ctx.reply('‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      if (!directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
      const countResult = await db.getClient().query(`
        SELECT COUNT(*) as total FROM master 
        WHERE status_work = '—Ä–∞–±–æ—Ç–∞–µ—Ç'
        AND cities && $1
      `, [directorInfo.cities]);
      
      const totalMasters = parseInt(countResult.rows[0].total);
      const totalPages = Math.ceil(totalMasters / itemsPerPage);

      if (totalMasters === 0) {
        ctx.reply('–†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const masters = await db.getClient().query(`
        SELECT * FROM master 
        WHERE status_work = '—Ä–∞–±–æ—Ç–∞–µ—Ç'
        AND cities && $1
        ORDER BY name ASC, id ASC
        LIMIT $2 OFFSET $3
      `, [directorInfo.cities, itemsPerPage, offset]);

      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
      const buttons = masters.rows.map(master => {
        const cities = Array.isArray(master.cities) ? master.cities.join(', ') : master.cities;
        return [Markup.button.callback(
          `üë®‚Äçüîß ${master.name} (${cities})`,
          `master_${master.id}`
        )];
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const navigationButtons = [];
      if (page > 1) {
        navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `masters_page_${page - 1}`));
      }
      if (page < totalPages) {
        navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', `masters_page_${page + 1}`));
      }
      
      if (navigationButtons.length > 0) {
        buttons.push(navigationButtons);
      }

      const mastersKeyboard = Markup.inlineKeyboard(buttons);

      const message = `üë®‚Äçüîß *–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö:*\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages} (–í—Å–µ–≥–æ: ${totalMasters})`;

      ctx.reply(message, {
        parse_mode: 'Markdown',
        ...mastersKeyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞
  async showMasterDetails(ctx, masterId) {
    try {
      const masters = await db.getClient().query(`
        SELECT * FROM master WHERE id = $1
      `, [masterId]);

      if (masters.rows.length === 0) {
        ctx.reply('–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const master = masters.rows[0];
      const cities = Array.isArray(master.cities) ? master.cities.join(', ') : master.cities;
      const dateCreate = new Date(master.date_create);
      const dateStr = dateCreate.toLocaleDateString('ru-RU');

      let message = `üë®‚Äçüîß *${master.name}*\n\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥–∞:* ${cities}\n`;
      message += `üìä *–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã:* ${master.status_work}\n`;
      message += `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${dateStr}\n`;
      message += `üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* ${master.note || '–ù–µ—Ç'}\n`;

      if (master.tg_id) {
        message += `üÜî *Telegram ID:* \`${master.tg_id}\`\n`;
      }

      if (master.chat_id) {
        message += `üí¨ *Chat ID:* \`${master.chat_id}\`\n`;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `change_master_status_${masterId}`)],
        [Markup.button.callback('üÜî –ò–∑–º–µ–Ω–∏—Ç—å TG ID', `change_master_tgid_${masterId}`)],
        [Markup.button.callback('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å Chat ID', `change_master_chatid_${masterId}`)]
      ]);

      ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
  async getAdmins(ctx) {
    try {
      const admins = await db.getAdmins(10);

      if (admins.length === 0) {
        ctx.reply('–ê–¥–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = 'üë®‚Äçüíª –ê–¥–º–∏–Ω—ã:\n\n';
      admins.forEach((admin, index) => {
        message += `${index + 1}. ${admin.login}\n`;
        message += `   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${admin.note || '–ù–µ—Ç'}\n\n`;
      });

      ctx.reply(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤');
    }
  }

  // –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ - —à–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
  async searchMaster(ctx) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
    ctx.session = ctx.session || {};
    ctx.session.searchingMaster = {};
    ctx.session.searchStep = 'name';
    
    ctx.reply('üîç *–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
      parse_mode: 'Markdown'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
  async processMasterSearch(ctx, text) {
    try {
      if (!text || text.trim().length === 0) {
        ctx.reply('‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:');
        return;
      }

      const searchName = text.trim();
      
      // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      
      if (!directorInfo) {
        ctx.reply('‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      if (!directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      // –ò—â–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –≤ –≥–æ—Ä–æ–¥–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      const masters = await db.getClient().query(`
        SELECT * FROM master 
        WHERE LOWER(name) LIKE LOWER($1)
        AND cities && $2
        ORDER BY name ASC, id ASC
      `, [`%${searchName}%`, directorInfo.cities]);
      
      if (masters.rows.length === 0) {
        ctx.reply(`‚ùå –ú–∞—Å—Ç–µ—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º "${searchName}" –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      await this.showSearchResults(ctx, masters.rows, searchName);
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.searchingMaster;
      delete ctx.session.searchStep;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async showSearchResults(ctx, masters, searchName, page = 1) {
    const itemsPerPage = 10;
    const totalMasters = masters.length;
    const totalPages = Math.ceil(totalMasters / itemsPerPage);
    const offset = (page - 1) * itemsPerPage;
    const mastersPage = masters.slice(offset, offset + itemsPerPage);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ctx.session = ctx.session || {};
    ctx.session.searchResults = {
      masters: masters,
      searchName: searchName
    };
    
    let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${searchName}"*\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages} (–ù–∞–π–¥–µ–Ω–æ: ${totalMasters})`;
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const buttons = mastersPage.map(master => {
      const cities = Array.isArray(master.cities) ? master.cities.join(', ') : master.cities;
      const statusEmoji = master.status_work === '—Ä–∞–±–æ—Ç–∞–µ—Ç' ? '‚úÖ' : '‚ùå';
      return [Markup.button.callback(
        `${statusEmoji} ${master.name} (${cities})`,
        `master_${master.id}`
      )];
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigationButtons = [];
    if (page > 1) {
      navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `search_page_${page - 1}`));
    }
    if (page < totalPages) {
      navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', `search_page_${page + 1}`));
    }
    
    if (navigationButtons.length > 0) {
      buttons.push(navigationButtons);
    }

    const searchKeyboard = Markup.inlineKeyboard(buttons);

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...searchKeyboard
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ - —à–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
  async addMaster(ctx) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    ctx.session = ctx.session || {};
    ctx.session.addingMaster = {};
    ctx.session.addingStep = 'name';
    
    ctx.reply('üë®‚Äçüîß *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:', {
      parse_mode: 'Markdown'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  async processMasterName(ctx, text) {
    try {
      if (!text || text.trim().length === 0) {
        ctx.reply('‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      ctx.session.addingMaster.name = text.trim();
      ctx.session.addingStep = 'cities';
      
      ctx.reply('üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞—Ä–∞—Ç–æ–≤, –≠–Ω–≥–µ–ª—å—Å):');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤
  async processMasterCities(ctx, text) {
    try {
      if (!text || text.trim().length === 0) {
        ctx.reply('‚ùå –ì–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞:');
        return;
      }

      // –ü–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥–∞
      const cities = text.split(',').map(city => city.trim()).filter(city => city.length > 0);
      
      if (cities.length === 0) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ—Ä–æ–¥–æ–≤. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      ctx.session.addingMaster.cities = cities;
      ctx.session.addingStep = 'chat_id';
      
      ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ Chat ID –º–∞—Å—Ç–µ—Ä–∞:');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Chat ID
  async processMasterChatId(ctx, text) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è Chat ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
      const chatId = parseInt(text);
      if (isNaN(chatId)) {
        ctx.reply('‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ Chat ID –º–∞—Å—Ç–µ—Ä–∞:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Chat ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      ctx.session.addingMaster.chat_id = chatId.toString();
      ctx.session.addingStep = 'tg_id';
      
      ctx.reply('üÜî –í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞:');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Chat ID –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Chat ID –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ TG ID –∏ –ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async processMasterTgId(ctx, text) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è TG ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
      const tgId = parseInt(text);
      if (isNaN(tgId)) {
        ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º TG ID
      ctx.session.addingMaster.tg_id = tgId.toString();
      ctx.session.addingMaster.status_work = '—Ä–∞–±–æ—Ç–∞–µ—Ç'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç
      ctx.session.addingMaster.date_create = new Date();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.showMasterConfirmation(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TG ID –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TG ID –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
  async showMasterConfirmation(ctx) {
    const data = ctx.session.addingMaster;
    
    let message = `üë®‚Äçüîß *–ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä*\n\n`;
    message += `üìù *–ò–º—è:* ${data.name}\n`;
    message += `üèôÔ∏è *–ì–æ—Ä–æ–¥–∞:* ${data.cities.join(', ')}\n`;
    message += `üí¨ *Chat ID:* \`${data.chat_id}\`\n`;
    message += `üÜî *Telegram ID:* \`${data.tg_id}\`\n`;
    message += `üìä *–°—Ç–∞—Ç—É—Å:* ${data.status_work}\n`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', `confirm_add_master_${ctx.from.id}`)],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_add_master_${ctx.from.id}`)]
    ]);

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
  async confirmAddMaster(ctx) {
    try {
      const data = ctx.session.addingMaster;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –ë–î
      await db.getClient().query(`
        INSERT INTO master (name, cities, chat_id, tg_id, status_work, date_create, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
      `, [
        data.name,
        data.cities,
        data.chat_id,
        data.tg_id,
        data.status_work,
        data.date_create
      ]);

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      let message = `üë®‚Äçüîß *–ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä*\n\n`;
      message += `üìù *–ò–º—è:* ${data.name}\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥–∞:* ${data.cities.join(', ')}\n`;
      message += `üí¨ *Chat ID:* \`${data.chat_id}\`\n`;
      message += `üÜî *Telegram ID:* \`${data.tg_id}\`\n`;
      message += `üìä *–°—Ç–∞—Ç—É—Å:* ${data.status_work}\n\n`;
      message += `‚úÖ *–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω*`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown'
      });
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.addingMaster;
      delete ctx.session.addingStep;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
  async cancelAddMaster(ctx) {
    try {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
      await ctx.editMessageText('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.addingMaster;
      delete ctx.session.addingStep;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞
  async changeMasterStatus(ctx, masterId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
      const statusButtons = [
        [Markup.button.callback('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç', `set_master_status_${masterId}_—Ä–∞–±–æ—Ç–∞–µ—Ç`)],
        [Markup.button.callback('‚ùå –£–≤–æ–ª–µ–Ω', `set_master_status_${masterId}_—É–≤–æ–ª–µ–Ω`)]
      ];

      const keyboard = Markup.inlineKeyboard(statusButtons);

      ctx.reply('üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞:', keyboard);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å TG ID –º–∞—Å—Ç–µ—Ä–∞
  async changeMasterTgId(ctx, masterId) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ TG ID
    ctx.session = ctx.session || {};
    ctx.session.editingMaster = {
      id: masterId,
      field: 'tg_id'
    };
    ctx.session.editingStep = 'tg_id';
    
    ctx.reply('üÜî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID –º–∞—Å—Ç–µ—Ä–∞:');
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å Chat ID –º–∞—Å—Ç–µ—Ä–∞
  async changeMasterChatId(ctx, masterId) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ Chat ID
    ctx.session = ctx.session || {};
    ctx.session.editingMaster = {
      id: masterId,
      field: 'chat_id'
    };
    ctx.session.editingStep = 'chat_id';
    
    ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Chat ID –º–∞—Å—Ç–µ—Ä–∞:');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞
  async setMasterStatus(ctx, masterId, status) {
    try {
      await db.getClient().query(`
        UPDATE master SET status_work = $1 WHERE id = $2
      `, [status, masterId]);

      ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ TG ID
  async processTgIdInput(ctx, text) {
    try {
      const masterId = ctx.session.editingMaster.id;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è TG ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
      const tgId = parseInt(text);
      if (isNaN(tgId)) {
        ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      await db.getClient().query(`
        UPDATE master SET tg_id = $1 WHERE id = $2
      `, [tgId.toString(), masterId]);

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.editingMaster;
      delete ctx.session.editingStep;

      ctx.reply(`‚úÖ Telegram ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${tgId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TG ID:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TG ID');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Chat ID
  async processChatIdInput(ctx, text) {
    try {
      const masterId = ctx.session.editingMaster.id;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è Chat ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
      const chatId = parseInt(text);
      if (isNaN(chatId)) {
        ctx.reply('‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      await db.getClient().query(`
        UPDATE master SET chat_id = $1 WHERE id = $2
      `, [chatId.toString(), masterId]);

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.editingMaster;
      delete ctx.session.editingStep;

      ctx.reply(`‚úÖ Chat ID –º–∞—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${chatId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Chat ID:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Chat ID');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  setupHandlers(bot) {
    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    bot.hears('üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', AuthMiddleware.requireDirector, (ctx) => {
      ctx.reply('–†–∞–∑–¥–µ–ª "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"', employeesMenu);
    });

    bot.hears('üìã –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤', AuthMiddleware.requireDirector, (ctx) => this.getMasters(ctx));
    bot.hears('üîç –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞', AuthMiddleware.requireDirector, (ctx) => this.searchMaster(ctx));
    bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', AuthMiddleware.requireDirector, (ctx) => this.addMaster(ctx));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^master_(\d+)$/, (ctx) => {
      const masterId = ctx.match[1];
      this.showMasterDetails(ctx, masterId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    bot.action(/^masters_page_(\d+)$/, (ctx) => {
      const page = parseInt(ctx.match[1]);
      this.getMasters(ctx, page);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    bot.action(/^search_page_(\d+)$/, (ctx) => {
      const page = parseInt(ctx.match[1]);
      if (ctx.session && ctx.session.searchResults) {
        this.showSearchResults(ctx, ctx.session.searchResults.masters, ctx.session.searchResults.searchName, page);
      } else {
        ctx.reply('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^change_master_status_(\d+)$/, (ctx) => {
      const masterId = ctx.match[1];
      this.changeMasterStatus(ctx, masterId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è TG ID –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^change_master_tgid_(\d+)$/, (ctx) => {
      const masterId = ctx.match[1];
      this.changeMasterTgId(ctx, masterId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Chat ID –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^change_master_chatid_(\d+)$/, (ctx) => {
      const masterId = ctx.match[1];
      this.changeMasterChatId(ctx, masterId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^set_master_status_(\d+)_(.+)$/, (ctx) => {
      const masterId = ctx.match[1];
      const status = ctx.match[2];
      this.setMasterStatus(ctx, masterId, status);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ TG ID, Chat ID –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    bot.on('text', async (ctx, next) => {
      if (ctx.session && ctx.session.editingStep) {
        switch (ctx.session.editingStep) {
          case 'tg_id':
            await this.processTgIdInput(ctx, ctx.message.text);
            break;
          case 'chat_id':
            await this.processChatIdInput(ctx, ctx.message.text);
            break;
          default:
            next();
        }
      } else if (ctx.session && ctx.session.addingStep) {
        switch (ctx.session.addingStep) {
          case 'name':
            await this.processMasterName(ctx, ctx.message.text);
            break;
          case 'cities':
            await this.processMasterCities(ctx, ctx.message.text);
            break;
          case 'chat_id':
            await this.processMasterChatId(ctx, ctx.message.text);
            break;
          case 'tg_id':
            await this.processMasterTgId(ctx, ctx.message.text);
            break;
          default:
            next();
        }
      } else if (ctx.session && ctx.session.searchStep) {
        switch (ctx.session.searchStep) {
          case 'name':
            await this.processMasterSearch(ctx, ctx.message.text);
            break;
          default:
            next();
        }
      } else {
        next();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    bot.action(/^confirm_add_master_(\d+)$/, (ctx) => {
      this.confirmAddMaster(ctx);
    });

    bot.action(/^cancel_add_master_(\d+)$/, (ctx) => {
      this.cancelAddMaster(ctx);
    });
  }
}

module.exports = new EmployeesHandler();
