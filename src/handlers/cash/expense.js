const db = require('../../config/database');
const { Markup } = require('telegraf');

class ExpenseHandler {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ - —à–∞–≥ 1: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  async addExpense(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–∑ –ë–î
      const directorInfo = await db.getDirectorInfo(ctx.from.id.toString());
      
      if (!directorInfo) {
        ctx.reply('‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥–∞ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
      if (!directorInfo.cities || directorInfo.cities.length === 0) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
      }

      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      if (directorInfo.cities.length === 1) {
        ctx.session = ctx.session || {};
        ctx.session.expenseData = { 
          city: directorInfo.cities[0],
          director: directorInfo.name
        };
        ctx.session.expenseStep = 'payment_purpose';
        await this.showPaymentPurposeSelection(ctx);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
      ctx.session.expenseData = { 
        director: directorInfo.name,
        cities: directorInfo.cities
      };
      ctx.session.expenseStep = 'city_selection';
      
      console.log('üîç Debug addExpense - session created:', {
        hasSession: !!ctx.session,
        hasExpenseData: !!(ctx.session && ctx.session.expenseData),
        cities: ctx.session.expenseData.cities
      });
      
      await this.showCitySelection(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  async showCitySelection(ctx) {
    const cities = ctx.session.expenseData.cities;
    
    let message = `üèôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞:*\n\n`;
    
    const buttons = cities.map((city, index) => {
      return Markup.button.callback(
        `üèôÔ∏è ${city}`,
        `select_city_expense_${index}`
      );
    });

    const keyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
  async selectCity(ctx, cityIndex) {
    try {
      console.log('üîç Debug selectCity:', {
        hasSession: !!ctx.session,
        hasExpenseData: !!(ctx.session && ctx.session.expenseData),
        hasCities: !!(ctx.session && ctx.session.expenseData && ctx.session.expenseData.cities),
        cityIndex: cityIndex
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (!ctx.session || !ctx.session.expenseData || !ctx.session.expenseData.cities) {
        ctx.reply('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      const selectedCity = ctx.session.expenseData.cities[cityIndex];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
      ctx.session.expenseData.city = selectedCity;
      ctx.session.expenseStep = 'payment_purpose';
      
      await this.showPaymentPurposeSelection(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
  async showPaymentPurposeSelection(ctx) {
    const paymentPurposes = [
      '–ê–≤–∏—Ç–æ',
      '–û—Ñ–∏—Å', 
      '–ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã',
      '–õ–∏—Å—Ç–æ–≤–∫–∏',
      '–ò–Ω–∫–∞—Å',
      '–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
      '–ò–Ω–æ–µ'
    ];
    
    let message = `üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:*\n\n`;
    
    const buttons = paymentPurposes.map((purpose, index) => {
      return Markup.button.callback(
        `üí≥ ${purpose}`,
        `select_payment_purpose_${index}`
      );
    });

    const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 });

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
  async selectPaymentPurpose(ctx, purposeIndex) {
    try {
      const paymentPurposes = [
        '–ê–≤–∏—Ç–æ',
        '–û—Ñ–∏—Å', 
        '–ü—Ä–æ–º–æ—É—Ç–µ—Ä—ã',
        '–õ–∏—Å—Ç–æ–≤–∫–∏',
        '–ò–Ω–∫–∞—Å',
        '–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
        '–ò–Ω–æ–µ'
      ];

      const selectedPurpose = paymentPurposes[purposeIndex];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      ctx.session.expenseData.paymentPurpose = selectedPurpose;
      ctx.session.expenseStep = 'amount';
      
      ctx.reply(`üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–ì–æ—Ä–æ–¥: ${ctx.session.expenseData.city}, –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${selectedPurpose}):`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
  async processAmount(ctx, text) {
    try {
      const amount = parseFloat(text);

      if (isNaN(amount) || amount <= 0) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      ctx.session.expenseData.amount = amount;
      ctx.session.expenseStep = 'note';
      ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã');
    }
  }


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async processNote(ctx, text) {
    try {
      if (!text || text.trim().length === 0) {
        ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
      ctx.session.expenseData.note = text.trim();
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const now = new Date();
      const day = now.getDate().toString().padStart(2, '0');
      const month = (now.getMonth() + 1).toString().padStart(2, '0');
      const year = now.getFullYear();
      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');
      
      ctx.session.expenseData.date = `${day}.${month}.${year} ${hours}:${minutes}`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.showConfirmation(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async showConfirmation(ctx) {
    const data = ctx.session.expenseData;
    
    let message = `üìã *–ó–∞–ø–∏—Å—å –†–∞—Å—Ö–æ–¥–∞*\n\n`;
    message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${data.city}\n`;
    message += `üí≥ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* ${data.paymentPurpose}\n`;
    message += `üí∞ *–°—É–º–º–∞:* ${data.amount} ‚ÇΩ\n`;
    message += `üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* ${data.note}\n`;
    message += `üë§ *–î–∏—Ä–µ–∫—Ç–æ—Ä:* ${data.director}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${data.date}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_expense_${ctx.from.id}`)],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_expense_${ctx.from.id}`)]
    ]);

    ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
  async confirmExpense(ctx) {
    try {
      const data = ctx.session.expenseData;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
      await db.getClient().query(`
        INSERT INTO cash (name, amount, city, note, name_create, payment_purpose, date_create, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW(), NOW())
      `, [
        '—Ä–∞—Å—Ö–æ–¥',
        data.amount,
        data.city,
        data.note,
        data.director,
        data.paymentPurpose
      ]);
      
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      let message = `üìã *–ó–∞–ø–∏—Å—å –†–∞—Å—Ö–æ–¥–∞*\n\n`;
      message += `üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${data.city}\n`;
      message += `üí≥ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* ${data.paymentPurpose}\n`;
      message += `üí∞ *–°—É–º–º–∞:* ${data.amount} ‚ÇΩ\n`;
      message += `üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* ${data.note}\n`;
      message += `üë§ *–î–∏—Ä–µ–∫—Ç–æ—Ä:* ${data.director}\n`;
      message += `üìÖ *–î–∞—Ç–∞:* ${data.date}\n\n`;
      message += `‚úÖ *–†–∞—Å—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*`;

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown'
      });
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.expenseData;
      delete ctx.session.expenseStep;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞');
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∞
  async cancelExpense(ctx) {
    try {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
      await ctx.editMessageText('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω');
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.expenseData;
      delete ctx.session.expenseStep;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Ö–æ–¥–∞:', error);
      ctx.reply('‚ùå –†–∞—Å—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω');
    }
  }

  setupHandlers(bot) {
    bot.hears('‚ûñ –†–∞—Å—Ö–æ–¥', (ctx) => this.addExpense(ctx));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    bot.on('text', async (ctx, next) => {
      if (ctx.session && ctx.session.expenseStep) {
        switch (ctx.session.expenseStep) {
          case 'amount':
            await this.processAmount(ctx, ctx.message.text);
            break;
          case 'note':
            await this.processNote(ctx, ctx.message.text);
            break;
          default:
            next();
        }
      } else {
        next();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    bot.action(/^select_city_expense_(\d+)$/, (ctx) => {
      const cityIndex = parseInt(ctx.match[1]);
      this.selectCity(ctx, cityIndex);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    bot.action(/^select_payment_purpose_(\d+)$/, (ctx) => {
      const purposeIndex = parseInt(ctx.match[1]);
      this.selectPaymentPurpose(ctx, purposeIndex);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.action(/^confirm_expense_(\d+)$/, (ctx) => {
      this.confirmExpense(ctx);
    });

    bot.action(/^cancel_expense_(\d+)$/, (ctx) => {
      this.cancelExpense(ctx);
    });
  }
}

module.exports = new ExpenseHandler();
