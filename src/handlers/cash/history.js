const db = require('../../config/database');
const { Markup } = require('telegraf');

class HistoryHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
  async showHistoryMenu(ctx) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìÖ –ó–∞ –¥–µ–Ω—å', 'history_day')],
      [Markup.button.callback('üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é', 'history_week')],
      [Markup.button.callback('üìä –ó–∞ –º–µ—Å—è—Ü', 'history_month')],
      [Markup.button.callback('üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', 'history_custom')]
    ]);

    ctx.reply('üìä *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  // –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã –∑–∞ –¥–µ–Ω—å
  async getHistoryForDay(ctx) {
    try {
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

      const history = await this.getHistoryByDateRange(startOfDay, endOfDay);
      await this.showHistoryResults(ctx, history, '–ó–∞ –¥–µ–Ω—å');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  // –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é
  async getHistoryForWeek(ctx) {
    try {
      const today = new Date();
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      startOfWeek.setHours(0, 0, 0, 0);
      
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 7);

      const history = await this.getHistoryByDateRange(startOfWeek, endOfWeek);
      await this.showHistoryResults(ctx, history, '–ó–∞ –Ω–µ–¥–µ–ª—é');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  // –ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã –∑–∞ –º–µ—Å—è—Ü
  async getHistoryForMonth(ctx) {
    try {
      const today = new Date();
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);

      const history = await this.getHistoryByDateRange(startOfMonth, endOfMonth);
      await this.showHistoryResults(ctx, history, '–ó–∞ –º–µ—Å—è—Ü');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
  async getHistoryByDateRange(startDate, endDate) {
    const query = `
      SELECT * FROM cash
      WHERE date_create >= $1 AND date_create < $2
      ORDER BY date_create DESC
      LIMIT 50
    `;
    const result = await db.getClient().query(query, [startDate, endDate]);
    return result.rows;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
  async showHistoryResults(ctx, history, period) {
    if (history.length === 0) {
      ctx.reply(`üìä *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã - ${period}*\n\n–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, {
        parse_mode: 'Markdown'
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    let fileContent = `–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã - ${period}\n`;
    fileContent += `–ü–µ—Ä–∏–æ–¥: ${new Date().toLocaleDateString('ru-RU')}\n\n`;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
    let totalIncome = 0;
    let totalExpense = 0;
    
    history.forEach((record) => {
      if (record.name === '–ø—Ä–∏—Ö–æ–¥') {
        totalIncome += parseFloat(record.amount);
      } else {
        totalExpense += parseFloat(record.amount);
      }
    });

    fileContent += `–ò—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥: +${totalIncome} ‚ÇΩ\n`;
    fileContent += `–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥: -${totalExpense} ‚ÇΩ\n`;
    fileContent += `–ë–∞–ª–∞–Ω—Å: ${totalIncome - totalExpense} ‚ÇΩ\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª (–ì–æ—Ä–æ–¥, –î–∞—Ç–∞, –¢–∏–ø, –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –°—É–º–º–∞, –ó–∞–º–µ—Ç–∫–∞, –ö—Ç–æ —Å–æ–∑–¥–∞–ª)
    fileContent += `–ì–æ—Ä–æ–¥\t\t–î–∞—Ç–∞\t\t\t–¢–∏–ø\t\t–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ\t\t–°—É–º–º–∞\t\t–ó–∞–º–µ—Ç–∫–∞\t\t\t–ö—Ç–æ —Å–æ–∑–¥–∞–ª\n`;
    fileContent += `================================================================================\n`;
    
    history.forEach((record) => {
      const date = new Date(record.date_create);
      const dateStr = date.toLocaleDateString('ru-RU');
      const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      const fullDateTime = `${dateStr} ${timeStr}`;
      const type = record.name === '–ø—Ä–∏—Ö–æ–¥' ? '–ø—Ä–∏—Ö–æ–¥' : '—Ä–∞—Å—Ö–æ–¥';
      const amount = record.name === '–ø—Ä–∏—Ö–æ–¥' ? `+${record.amount}` : `-${record.amount}`;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      let note = record.note || '–ù–µ—Ç –∑–∞–º–µ—Ç–∫–∏';
      if (note.includes('–ë–¢ - –ò—Ç–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É:')) {
        note = '–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞';
      }
      
      const city = record.city || '-';
      const paymentPurpose = record.payment_purpose || '-';
      
      const createdBy = record.name_create || '-';

      fileContent += `${city}\t\t${fullDateTime}\t${type}\t\t${paymentPurpose}\t\t${amount} ‚ÇΩ\t\t${note}\t\t${createdBy}\n`;
    });

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const fs = require('fs');
    const path = require('path');
    const fileName = `history_${period.replace(/\s+/g, '_')}_${Date.now()}.txt`;
    const filePath = path.join(__dirname, '..', '..', 'temp', fileName);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const tempDir = path.dirname(filePath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, fileContent, 'utf8');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    try {
      await ctx.replyWithDocument({
        source: filePath,
        filename: fileName
      }, {
        caption: `üìä *–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Å—Å—ã - ${period}*\n\nüìÅ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`,
        parse_mode: 'Markdown'
      });
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(filePath);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  setupHandlers(bot) {
    bot.hears('üìä –ò—Å—Ç–æ—Ä–∏—è', (ctx) => this.showHistoryMenu(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    bot.action('history_day', (ctx) => this.getHistoryForDay(ctx));
    bot.action('history_week', (ctx) => this.getHistoryForWeek(ctx));
    bot.action('history_month', (ctx) => this.getHistoryForMonth(ctx));
    bot.action('history_custom', (ctx) => this.requestCustomDate(ctx));
  }

  // –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã
  async requestCustomDate(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.historyCustomDate = true;
    
    ctx.reply('üìÖ *–í—ã–±–æ—Ä –¥–∞—Ç—ã*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):', {
      parse_mode: 'Markdown'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã
  async processCustomDate(ctx, dateText) {
    try {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
      const dateParts = dateText.split('.');
      if (dateParts.length !== 3) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)');
        return;
      }

      const day = parseInt(dateParts[0]);
      const month = parseInt(dateParts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      const year = parseInt(dateParts[2]);

      if (isNaN(day) || isNaN(month) || isNaN(year)) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)');
        return;
      }

      const selectedDate = new Date(year, month, day);
      const startOfDay = new Date(selectedDate);
      startOfDay.setHours(0, 0, 0, 0);
      
      const endOfDay = new Date(selectedDate);
      endOfDay.setHours(23, 59, 59, 999);

      const history = await this.getHistoryByDateRange(startOfDay, endOfDay);
      await this.showHistoryResults(ctx, history, `–ó–∞ ${dateText}`);

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.historyCustomDate;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã');
    }
  }
}

module.exports = new HistoryHandler();
