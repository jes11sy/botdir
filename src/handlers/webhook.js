const express = require('express');
const db = require('../config/database');
const config = require('../config');

class WebhookHandler {
  constructor(bot) {
    this.bot = bot;
    this.app = express();
    this.app.use(express.json());
    this.setupRoutes();
  }

  setupRoutes() {
    // Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CRM
    this.app.post('/webhook/order-update', async (req, res) => {
      try {
        const { orderId, newDate, city, token } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (token !== config.WEBHOOK_TOKEN) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω webhook');
          return res.status(401).json({ success: false, message: 'Unauthorized' });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!orderId || !newDate || !city) {
          console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
          return res.status(400).json({ success: false, message: 'Missing required fields' });
        }

        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –∑–∞–∫–∞–∑ #${orderId}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${newDate}, –≥–æ—Ä–æ–¥: ${city}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É
        const director = await this.getDirectorByCity(city);
        if (!director) {
          console.log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return res.status(404).json({ success: false, message: 'Director not found' });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
        await this.sendNotificationToDirector(director.tg_id, orderId, newDate);

        res.json({ success: true, message: 'Notification sent' });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
      }
    });

    // Health check endpoint
    this.app.get('/health', (req, res) => {
      res.json({ status: 'ok', timestamp: new Date().toISOString() });
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É
  async getDirectorByCity(city) {
    try {
      const query = `
        SELECT tg_id, name, cities 
        FROM director 
        WHERE $1 = ANY(cities)
        LIMIT 1
      `;
      const result = await db.getClient().query(query, [city]);
      return result.rows.length > 0 ? result.rows[0] : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
  async sendNotificationToDirector(tgId, orderId, newDate) {
    try {
      if (!tgId) {
        console.log('‚ùå tg_id –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
      const date = new Date(newDate);
      const dateStr = date.toLocaleDateString('ru-RU');
      const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

      const message = `üìÖ *–ó–∞–∫–∞–∑ ‚Ññ${orderId} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ ${dateStr} ${timeStr}*`;

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É ${tgId}: ${message}`);

      await this.bot.telegram.sendMessage(tgId, message, {
        parse_mode: 'Markdown'
      });

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É ${tgId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—É:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
  start(port = 3001) {
    try {
      this.app.listen(port, () => {
        console.log(`üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
  }
}

module.exports = WebhookHandler;
